[default]
time=lambda : time.ctime()
seconds=lambda : time.time()
data=lambda data: data.decode('ascii')
bytes2hex=lambda data: ' '.join([''.join(list(map(chr,list(zip(*[iter(binascii.b2a_hex(data))]*2))[i]))) for i in range(len(data))])
bytes2oct=lambda data: ' '.join(i[2:].rjust(3,'0') for i in list(map(oct,data)))
bytes2bin=lambda data: ' '.join(i[2:].rjust(8,'0') for i in list(map(bin,data)))
bin2bytes=lambda data: ''.join(map(chr,[int(data[i:i+8],2) for i in range(0,len(data),8)])).encode('ascii')
oct2bytes=lambda data: ''.join(map(chr,[int(data[i:i+3],8) for i in range(0,len(data),3)])).encode('ascii')
hex2bytes=lambda data: binascii.a2b_hex(data)
threadname=lambda : threading.current_thread().getName()
threadinfo=lambda : threading.current_thread().__repr__()
number=lambda num: num+1

[basic]
withoutdata=time,threadname
withdata=bytes2hex,data
sequence=	number,
			time,
			threadname,
			bytes2hex,
			data,
			tail
connector=' '
style=list
tail='\n'
bgcolor=YELLOW



[advance]
withoutdata=time,threadname
withdata=bytes2hex,data
sequence=number,time,threadname,bytes2hex,data,tail
connector='\n'
style=tupe
tail='\n'
bgcolor=YELLOW



